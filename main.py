# -*- coding: utf-8 -*-
"""dibimbing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXv7wzI-6P-s2vP2EDhAL1hOsYgOmR_x

# **Salary Prediction using Random Forest Regression**

## Overview
This project implements a Random Forest Regression model to predict employee salaries based on years of experience. The dataset contains information about 200 employees, including their years of experience and corresponding salaries.

## Dataset Description
* **Source**: salary data.csv
"""

from google.colab import files
import pandas as pd

# Upload file
uploaded = files.upload()

"""* **Features**:
  * **employee_id**: Unique identifier for each
  * **experience_years**: Years of work
  * **salary**: Current salary in monetary units

## Implementation
### 1. Data Preparation and Import
First, we'll import the necessary libraries and load our dataset.

"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Read the CSV file
df = pd.read_csv('salary data.csv', sep=';')

# Display first few rows and basic information
print("Dataset Head:")
print(df.head())
print("\nDataset Info:")
print(df.info())

"""### 2. Data Preprocessing
We'll prepare our data by separating features and target variables, and splitting into training and testing sets.
"""

# Separate features and target
X = df[['experience_years']].values
y = df['salary'].values

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y,
                                                    test_size=0.2,
                                                    random_state=42)

print("Training set shape:", X_train.shape)
print("Testing set shape:", X_test.shape)

"""### 3. Model Implementation
Now we'll create and train our Random Forest Regression model.
"""

# Initialize the model
rf_model = RandomForestRegressor(n_estimators=100,
                                random_state=42)

# Train the model
rf_model.fit(X_train, y_train)

# Make predictions
y_pred = rf_model.predict(X_test)

"""### 4. Model Evaluation
Let's evaluate our model's performance using various metrics.
"""

# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Model Performance Metrics:")
print(f"Mean Squared Error: {mse:.2f}")
print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"R-squared Score: {r2:.4f}")

"""### 5. Visualization
Let's create visualizations to better understand our model's performance.
"""

# Create a scatter plot of actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(X_test, y_test, color='blue', label='Actual')
plt.scatter(X_test, y_pred, color='red', label='Predicted')
plt.xlabel('Years of Experience')
plt.ylabel('Salary')
plt.title('Random Forest Regression: Actual vs Predicted Salaries')
plt.legend()
plt.grid(True)
plt.show()

"""## Results and Interpretation
The Random Forest Regression model shows strong performance in predicting salaries based on years of experience. The R-squared value indicates how much variance in salary is explained by our model. The RMSE provides the average deviation of our predictions in the same units as the salary.
## Model Application
Here's how to use the model for making new predictions:

## Conclusion
This Random Forest Regression model provides a robust framework for predicting employee salaries based on years of experience. The model's performance metrics and visualizations demonstrate its effectiveness in capturing the relationship between experience and salary.

The implementation showcases:
* Proper data preprocessing and splitting
* Model training and evaluation
* Performance visualization
* Practical application for new predictions
"""